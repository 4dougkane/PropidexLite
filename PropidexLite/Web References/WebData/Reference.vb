'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WebData
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://planimetron.com/webservices/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetValueExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBytesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTablesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTablesExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDXFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePDFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMapOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLayerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateJPGOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLogoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateICOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IdentityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IdentityExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DoWorkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DoWorkExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.PropidexLite.My.MySettings.Default.WebData
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetValueCompleted As GetValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetValueExCompleted As GetValueExCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBytesCompleted As GetBytesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTablesCompleted As GetTablesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTablesExCompleted As GetTablesExCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDXFCompleted As UpdateDXFCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePDFCompleted As UpdatePDFCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMapCompleted As UpdateMapCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLayerCompleted As UpdateLayerCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateJPGCompleted As UpdateJPGCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLogoCompleted As UpdateLogoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateICOCompleted As UpdateICOCompletedEventHandler
        
        '''<remarks/>
        Public Event IdentityCompleted As IdentityCompletedEventHandler
        
        '''<remarks/>
        Public Event IdentityExCompleted As IdentityExCompletedEventHandler
        
        '''<remarks/>
        Public Event DoWorkCompleted As DoWorkCompletedEventHandler
        
        '''<remarks/>
        Public Event DoWorkExCompleted As DoWorkExCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/GetValue", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetValue(ByVal source As String) As Object
            Dim results() As Object = Me.Invoke("GetValue", New Object() {source})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetValueAsync(ByVal source As String)
            Me.GetValueAsync(source, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetValueAsync(ByVal source As String, ByVal userState As Object)
            If (Me.GetValueOperationCompleted Is Nothing) Then
                Me.GetValueOperationCompleted = AddressOf Me.OnGetValueOperationCompleted
            End If
            Me.InvokeAsync("GetValue", New Object() {source}, Me.GetValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetValueCompleted(Me, New GetValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/GetValueEx", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetValueEx(ByVal source As String, ByVal Param As String) As Object
            Dim results() As Object = Me.Invoke("GetValueEx", New Object() {source, Param})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetValueExAsync(ByVal source As String, ByVal Param As String)
            Me.GetValueExAsync(source, Param, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetValueExAsync(ByVal source As String, ByVal Param As String, ByVal userState As Object)
            If (Me.GetValueExOperationCompleted Is Nothing) Then
                Me.GetValueExOperationCompleted = AddressOf Me.OnGetValueExOperationCompleted
            End If
            Me.InvokeAsync("GetValueEx", New Object() {source, Param}, Me.GetValueExOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetValueExOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetValueExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetValueExCompleted(Me, New GetValueExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/GetBytes", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBytes(ByVal source As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetBytes", New Object() {source})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBytesAsync(ByVal source As String)
            Me.GetBytesAsync(source, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBytesAsync(ByVal source As String, ByVal userState As Object)
            If (Me.GetBytesOperationCompleted Is Nothing) Then
                Me.GetBytesOperationCompleted = AddressOf Me.OnGetBytesOperationCompleted
            End If
            Me.InvokeAsync("GetBytes", New Object() {source}, Me.GetBytesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBytesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBytesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBytesCompleted(Me, New GetBytesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/GetTables", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTables(ByVal Query As String, ByRef Err As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTables", New Object() {Query, Err})
            Err = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTablesAsync(ByVal Query As String, ByVal Err As String)
            Me.GetTablesAsync(Query, Err, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTablesAsync(ByVal Query As String, ByVal Err As String, ByVal userState As Object)
            If (Me.GetTablesOperationCompleted Is Nothing) Then
                Me.GetTablesOperationCompleted = AddressOf Me.OnGetTablesOperationCompleted
            End If
            Me.InvokeAsync("GetTables", New Object() {Query, Err}, Me.GetTablesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTablesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTablesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTablesCompleted(Me, New GetTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/GetTablesEx", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTablesEx(ByVal Query As String, ByVal Param As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTablesEx", New Object() {Query, Param})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTablesExAsync(ByVal Query As String, ByVal Param As String)
            Me.GetTablesExAsync(Query, Param, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTablesExAsync(ByVal Query As String, ByVal Param As String, ByVal userState As Object)
            If (Me.GetTablesExOperationCompleted Is Nothing) Then
                Me.GetTablesExOperationCompleted = AddressOf Me.OnGetTablesExOperationCompleted
            End If
            Me.InvokeAsync("GetTablesEx", New Object() {Query, Param}, Me.GetTablesExOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTablesExOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTablesExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTablesExCompleted(Me, New GetTablesExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/UpdateDXF", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDXF(ByVal XNo As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal byteMe() As Byte) As Boolean
            Dim results() As Object = Me.Invoke("UpdateDXF", New Object() {XNo, byteMe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDXFAsync(ByVal XNo As Integer, ByVal byteMe() As Byte)
            Me.UpdateDXFAsync(XNo, byteMe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDXFAsync(ByVal XNo As Integer, ByVal byteMe() As Byte, ByVal userState As Object)
            If (Me.UpdateDXFOperationCompleted Is Nothing) Then
                Me.UpdateDXFOperationCompleted = AddressOf Me.OnUpdateDXFOperationCompleted
            End If
            Me.InvokeAsync("UpdateDXF", New Object() {XNo, byteMe}, Me.UpdateDXFOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDXFOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDXFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDXFCompleted(Me, New UpdateDXFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/UpdatePDF", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePDF(ByVal PID As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal byteMe() As Byte) As Boolean
            Dim results() As Object = Me.Invoke("UpdatePDF", New Object() {PID, byteMe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePDFAsync(ByVal PID As Integer, ByVal byteMe() As Byte)
            Me.UpdatePDFAsync(PID, byteMe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePDFAsync(ByVal PID As Integer, ByVal byteMe() As Byte, ByVal userState As Object)
            If (Me.UpdatePDFOperationCompleted Is Nothing) Then
                Me.UpdatePDFOperationCompleted = AddressOf Me.OnUpdatePDFOperationCompleted
            End If
            Me.InvokeAsync("UpdatePDF", New Object() {PID, byteMe}, Me.UpdatePDFOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePDFOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePDFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePDFCompleted(Me, New UpdatePDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/UpdateMap", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMap(ByVal MNo As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal byteMe() As Byte) As Boolean
            Dim results() As Object = Me.Invoke("UpdateMap", New Object() {MNo, byteMe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMapAsync(ByVal MNo As Integer, ByVal byteMe() As Byte)
            Me.UpdateMapAsync(MNo, byteMe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMapAsync(ByVal MNo As Integer, ByVal byteMe() As Byte, ByVal userState As Object)
            If (Me.UpdateMapOperationCompleted Is Nothing) Then
                Me.UpdateMapOperationCompleted = AddressOf Me.OnUpdateMapOperationCompleted
            End If
            Me.InvokeAsync("UpdateMap", New Object() {MNo, byteMe}, Me.UpdateMapOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMapOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMapCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMapCompleted(Me, New UpdateMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/UpdateLayer", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLayer(ByVal XXX As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal byteMe() As Byte) As Boolean
            Dim results() As Object = Me.Invoke("UpdateLayer", New Object() {XXX, byteMe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLayerAsync(ByVal XXX As Integer, ByVal byteMe() As Byte)
            Me.UpdateLayerAsync(XXX, byteMe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLayerAsync(ByVal XXX As Integer, ByVal byteMe() As Byte, ByVal userState As Object)
            If (Me.UpdateLayerOperationCompleted Is Nothing) Then
                Me.UpdateLayerOperationCompleted = AddressOf Me.OnUpdateLayerOperationCompleted
            End If
            Me.InvokeAsync("UpdateLayer", New Object() {XXX, byteMe}, Me.UpdateLayerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLayerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLayerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLayerCompleted(Me, New UpdateLayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/UpdateJPG", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateJPG(ByVal ID As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal byteMe() As Byte) As Boolean
            Dim results() As Object = Me.Invoke("UpdateJPG", New Object() {ID, byteMe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateJPGAsync(ByVal ID As Integer, ByVal byteMe() As Byte)
            Me.UpdateJPGAsync(ID, byteMe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJPGAsync(ByVal ID As Integer, ByVal byteMe() As Byte, ByVal userState As Object)
            If (Me.UpdateJPGOperationCompleted Is Nothing) Then
                Me.UpdateJPGOperationCompleted = AddressOf Me.OnUpdateJPGOperationCompleted
            End If
            Me.InvokeAsync("UpdateJPG", New Object() {ID, byteMe}, Me.UpdateJPGOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateJPGOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateJPGCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateJPGCompleted(Me, New UpdateJPGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/UpdateLogo", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLogo(ByVal LogoName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal byteMe() As Byte) As Boolean
            Dim results() As Object = Me.Invoke("UpdateLogo", New Object() {LogoName, byteMe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLogoAsync(ByVal LogoName As String, ByVal byteMe() As Byte)
            Me.UpdateLogoAsync(LogoName, byteMe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLogoAsync(ByVal LogoName As String, ByVal byteMe() As Byte, ByVal userState As Object)
            If (Me.UpdateLogoOperationCompleted Is Nothing) Then
                Me.UpdateLogoOperationCompleted = AddressOf Me.OnUpdateLogoOperationCompleted
            End If
            Me.InvokeAsync("UpdateLogo", New Object() {LogoName, byteMe}, Me.UpdateLogoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLogoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLogoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLogoCompleted(Me, New UpdateLogoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/UpdateICO", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateICO(ByVal iName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal byteMe() As Byte) As Boolean
            Dim results() As Object = Me.Invoke("UpdateICO", New Object() {iName, byteMe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateICOAsync(ByVal iName As String, ByVal byteMe() As Byte)
            Me.UpdateICOAsync(iName, byteMe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateICOAsync(ByVal iName As String, ByVal byteMe() As Byte, ByVal userState As Object)
            If (Me.UpdateICOOperationCompleted Is Nothing) Then
                Me.UpdateICOOperationCompleted = AddressOf Me.OnUpdateICOOperationCompleted
            End If
            Me.InvokeAsync("UpdateICO", New Object() {iName, byteMe}, Me.UpdateICOOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateICOOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateICOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateICOCompleted(Me, New UpdateICOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/Identity", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Identity(ByVal source As String) As Integer
            Dim results() As Object = Me.Invoke("Identity", New Object() {source})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IdentityAsync(ByVal source As String)
            Me.IdentityAsync(source, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IdentityAsync(ByVal source As String, ByVal userState As Object)
            If (Me.IdentityOperationCompleted Is Nothing) Then
                Me.IdentityOperationCompleted = AddressOf Me.OnIdentityOperationCompleted
            End If
            Me.InvokeAsync("Identity", New Object() {source}, Me.IdentityOperationCompleted, userState)
        End Sub
        
        Private Sub OnIdentityOperationCompleted(ByVal arg As Object)
            If (Not (Me.IdentityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IdentityCompleted(Me, New IdentityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/IdentityEx", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IdentityEx(ByVal Source As String, ByVal Param As String) As Integer
            Dim results() As Object = Me.Invoke("IdentityEx", New Object() {Source, Param})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IdentityExAsync(ByVal Source As String, ByVal Param As String)
            Me.IdentityExAsync(Source, Param, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IdentityExAsync(ByVal Source As String, ByVal Param As String, ByVal userState As Object)
            If (Me.IdentityExOperationCompleted Is Nothing) Then
                Me.IdentityExOperationCompleted = AddressOf Me.OnIdentityExOperationCompleted
            End If
            Me.InvokeAsync("IdentityEx", New Object() {Source, Param}, Me.IdentityExOperationCompleted, userState)
        End Sub
        
        Private Sub OnIdentityExOperationCompleted(ByVal arg As Object)
            If (Not (Me.IdentityExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IdentityExCompleted(Me, New IdentityExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/DoWork", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoWork(ByVal Query As String) As Integer
            Dim results() As Object = Me.Invoke("DoWork", New Object() {Query})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoWorkAsync(ByVal Query As String)
            Me.DoWorkAsync(Query, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoWorkAsync(ByVal Query As String, ByVal userState As Object)
            If (Me.DoWorkOperationCompleted Is Nothing) Then
                Me.DoWorkOperationCompleted = AddressOf Me.OnDoWorkOperationCompleted
            End If
            Me.InvokeAsync("DoWork", New Object() {Query}, Me.DoWorkOperationCompleted, userState)
        End Sub
        
        Private Sub OnDoWorkOperationCompleted(ByVal arg As Object)
            If (Not (Me.DoWorkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoWorkCompleted(Me, New DoWorkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planimetron.com/webservices/DoWorkEx", RequestNamespace:="http://planimetron.com/webservices/", ResponseNamespace:="http://planimetron.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoWorkEx(ByVal Query As String, ByVal Param As String) As Integer
            Dim results() As Object = Me.Invoke("DoWorkEx", New Object() {Query, Param})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoWorkExAsync(ByVal Query As String, ByVal Param As String)
            Me.DoWorkExAsync(Query, Param, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoWorkExAsync(ByVal Query As String, ByVal Param As String, ByVal userState As Object)
            If (Me.DoWorkExOperationCompleted Is Nothing) Then
                Me.DoWorkExOperationCompleted = AddressOf Me.OnDoWorkExOperationCompleted
            End If
            Me.InvokeAsync("DoWorkEx", New Object() {Query, Param}, Me.DoWorkExOperationCompleted, userState)
        End Sub
        
        Private Sub OnDoWorkExOperationCompleted(ByVal arg As Object)
            If (Not (Me.DoWorkExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoWorkExCompleted(Me, New DoWorkExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub GetValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub GetValueExCompletedEventHandler(ByVal sender As Object, ByVal e As GetValueExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetValueExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub GetBytesCompletedEventHandler(ByVal sender As Object, ByVal e As GetBytesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBytesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub GetTablesCompletedEventHandler(ByVal sender As Object, ByVal e As GetTablesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTablesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Err() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub GetTablesExCompletedEventHandler(ByVal sender As Object, ByVal e As GetTablesExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTablesExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub UpdateDXFCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDXFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDXFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub UpdatePDFCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePDFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePDFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub UpdateMapCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMapCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMapCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub UpdateLayerCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLayerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLayerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub UpdateJPGCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateJPGCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateJPGCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub UpdateLogoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLogoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLogoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub UpdateICOCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateICOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateICOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub IdentityCompletedEventHandler(ByVal sender As Object, ByVal e As IdentityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IdentityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub IdentityExCompletedEventHandler(ByVal sender As Object, ByVal e As IdentityExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IdentityExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub DoWorkCompletedEventHandler(ByVal sender As Object, ByVal e As DoWorkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DoWorkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")>  _
    Public Delegate Sub DoWorkExCompletedEventHandler(ByVal sender As Object, ByVal e As DoWorkExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DoWorkExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
